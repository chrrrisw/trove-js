{"name":"Trove-js","tagline":"A JavaScript library to access the National Library of Australia's Trove API","body":"# trove-js\r\nA JavaScript library to access the National Library of Australia's (NLA) Trove API.\r\n\r\nThe Trove website can be found at: http://trove.nla.gov.au\r\n\r\nTrove's API is documented at: http://help.nla.gov.au/trove/building-with-trove/api-technical-guide\r\n\r\nThis library works with: http://api.trove.nla.gov.au\r\n\r\n## If you just want to use the library in your webpage\r\n1. Get a Trove API key: [see here](#getting_key)\r\n2. Download dist/trove-api.js or dist/trove-api.min.js\r\n3. Include it in your web page\r\n4. Use it\r\n\r\n## Developing the library\r\n\r\nSource files are in `src`, concatenated and minified distribution files are in `dist`.\r\n\r\nYou'll need `npm` and `grunt-cli` installed to generate the distribution files.\r\n\r\nClone this repository, and go to the directory created. Type:\r\n\r\n```bash\r\nnpm install\r\n```\r\n\r\nThis will install the dependencies for building and testing.\r\n\r\nThere are a number of grunt tasks defined, but be aware that the unit tests will need a Trove API key in the `__key_file__` file.\r\n\r\n| Task      | Description\r\n|:--------- |:-------------\r\n| default   | Check code style, generate the docs, run unit tests, concatenate and uglify the source files.\r\n| prepare   | Used to prepare the code for uploading to GitHub (code style, docs, concat and uglify).\r\n| test      | Checks code style and runs unit tests (you'll need an API key to run the tests).\r\n\r\nTo build the dist/trove-api.js after modifying a source file just type:\r\n\r\n```bash\r\ngrunt\r\n```\r\n\r\nto run the default task, or\r\n\r\n```bash\r\ngrunt prepare\r\n```\r\n\r\nwhich should check your files for code style and produce a concatenated file, as well as an uglified one.\r\n\r\n## <a name=\"getting_key\"></a>Getting an API key\r\nYou'll need to get an API key first, by signing up and requesting one. Instructions for doing so are found at [Trove Help](http://help.nla.gov.au/trove/building-with-trove/api).\r\n\r\nBoth the unit tests and the demo page will load a key from the `__key_file__` file. So if you want to run the tests or\r\ntry out the demo page, put your key in this file (__DON'T commit and push this change to GitHub__).\r\n\r\nPlease comply with the conditions of use, an put \"powered by trove\" somewhere on your site.\r\n\r\n## Library initialisation\r\nIn your JavaScript, initialise the library first giving it your key:\r\n\r\n```javascript\r\nTrove.init(your_key);\r\n```\r\n\r\n## Asynchrony\r\nRemember that each time you make a call for data, the data will not be available until the Trove servers respond. For example, if you were to write:\r\n\r\n```javascript\r\nvar article = new Trove.NewspaperArticle({\r\n    init: 18342701\r\n});\r\nconsole.log(article.heading);\r\n```\r\n\r\nyou would, more than likely, see 'undefined' at the console.  For this reason, the API provides a parameter for a function to be called when the request completes:\r\n\r\n```javascript\r\nvar article = new Trove.NewspaperArticle({\r\n    init: 18342701,\r\n    done: function (a) {console.log(a.heading)};\r\n});\r\n```\r\n\r\nYou could also write:\r\n\r\n```javascript\r\nfunction done_callback(a) {\r\n    console.log(a.heading);\r\n}\r\n\r\nvar article = new Trove.NewspaperArticle({\r\n    init: 18342701,\r\n    done: done_callback\r\n});\r\n```\r\n\r\nto get the same result. The parameter to the called function is the object that has been updated by the request.\r\n\r\n## Examples and Documentation\r\n\r\nPlease see the [wiki](https://github.com/chrrrisw/trove-js/wiki) for examples\r\n\r\nThere are API docs [here](https://github.com/chrrrisw/trove-js/blob/master/docs/api.md) and you can build HTML API pages using ```grunt jsdoc```.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}