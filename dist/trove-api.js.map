{"version":3,"sources":["webpack://Trove/webpack/universalModuleDefinition","webpack://Trove/webpack/bootstrap","webpack://Trove/./src/article.js","webpack://Trove/./src/book.js","webpack://Trove/./src/collection.js","webpack://Trove/./src/contributor.js","webpack://Trove/./src/contributor_list.js","webpack://Trove/./src/list.js","webpack://Trove/./src/map.js","webpack://Trove/./src/music.js","webpack://Trove/./src/newspaper_article.js","webpack://Trove/./src/newspaper_list.js","webpack://Trove/./src/newspaper_title.js","webpack://Trove/./src/person.js","webpack://Trove/./src/picture.js","webpack://Trove/./src/search.js","webpack://Trove/./src/trove.js","webpack://Trove/./src/work.js"],"names":["Article","constructor","options","Book","Collection","Contributor","init","undefined","$","extend","get","id","process_done","data","textStatus","jqXHR","contributor","done","process_fail","errorThrown","console","error","status","fail","get_parent","parent","reclevel","query_data","key","Trove","trove_key","encoding","ajax","dataType","url","API","CONTRIBUTOR","context","ContributorList","contributors","terms","index","response","push","q","List","list","includes","Array","isArray","length","include","join","LIST","Map","Music","NewspaperArticle","article","NP_ARTICLE","get_newspaper","title","NewspaperList","newspapers","state","records","newspaper","STATES","ALL","NP_TITLES","STATEABBR","NewspaperTitle","stateabbr","range","NP_TITLE","Person","people","PEOPLE","Picture","CONSTRUCTORS","book","collection","map","music","picture","Search","items","_last_search","facets","limits","zone_list","zone","zone_items","zone_name","zone_num","name","SEARCH_RECORDS","item_num","remove_facet","facet","indexOf","splice","add_facet","clear_date_range_limit","decade","year","month","limit_date_range","start","split_start","split","substr","clear_category_limit","category","limit_category","query","zones","ZONES","s","n","number","sort","sortby","limit_keys","Object","keys","QUERY","requery","delta","next","previous","newspaper_articles","ENC","BOOK","PICTURE","ARTICLE","MUSIC","MAP","COLLECTION","NEWSPAPER","FORMATS","WEBSITE","ARTWORK","ARTICLEABSTRACT","ARTICLECHAPTER","ARTICLEPAPER","ARTICLEJOURNAL","ARTICLEOTHER","ARTICLEREPORT","ARTICLEREVIEW","ARTICLEWORKING","AUDIOBOOK","BOOKBRAILLE","BOOKILLUSTRATED","BOOKLARGEPRINT","PROCEEDINGS","DATASET","MAPAERIAL","MAPATLAS","MAPBRAILLE","MAPELECTRONIC","MAPGLOBE","MAPLARGE","MAPSERIES","MAPMICROFORM","MAPSINGLE","OBJECT","PERIODICAL","PERIODICALJOURNAL","PERIODICALNEWSPAPER","PHOTO","POSTER","PUBLISHED","SHEETMUSIC","SOUND","SOUNDTALK","SOUNDOTHER","SOUNDMUSIC","THESIS","UNPUBLISHED","VIDEO","VIDEOCAPTIONED","AVAILABILITIES","ONLINE","FREE_ACCESS","MEMBERSHIP","SUBSCRIPTION","POSSIBLY","VENDORS","AUDIENCES","TRADE","GENERAL","ACADEMIC","PROFESSIONAL","CHILDREN","CHILDRENUPPER","CHILDRENLOWER","CATEGORIES","ADVERTISING","LISTS","FAMILY_NOTICES","LITERATURE","FACETS","FORMAT","DECADE","YEAR","MONTH","LANGUAGE","AVAILABILITY","AUSTRALIAN","OCCUPATION","ZOOM","VENDORDB","VENDOR","AUDIENCE","TITLE","CATEGORY","ILLUSTRATED","ILLTYPE","WORD","LIMITS","SORTBY","DATEDESC","DATEASC","RELEVANCE","RECLEVEL","FULL","BRIEF","INCLUDES","TAGS","COMMENTS","HOLDINGS","LINKS","SUBSCRIBINGLIBS","WORKVERSIONS","ARTICLETEXT","YEARS","LISTITEMS","NSW","ACT","QLD","TAS","SA","NT","WA","VIC","NATIONAL","API_ADDRESS","RECORD_TYPE","WORK","NEWS","Work","work"],"mappings":"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","file":"trove-api.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Trove\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Trove\"] = factory();\n\telse\n\t\troot[\"Trove\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/trove.js\");\n","import {Work} from \"./work\";\n\n/**\n * A class to hold a journal article.\n * @class\n * @augments Work\n */\nexport class Article extends Work {\n\n\t/**\n\t * Create an Article\n\t * @param {Object} options\n\t */\n    constructor (options) {\n        super(options);\n        // console.log('Creating Article');\n    }\n\n}\n","import {Work} from \"./work\";\n\n/**\n * A class to hold a book\n * @class\n * @augments Work\n * @param {Object} options\n */\nexport class Book extends Work {\n\n    constructor (options) {\n        super(options);\n        // console.log('Creating Book');\n    }\n\n}\n","import {Work} from \"./work\";\n\n/**\n * A class to hold a collection\n * @class\n * @augments Work\n * @param {Object} options\n */\nexport class Collection extends Work {\n\n    constructor (options) {\n        super(options);\n        // console.log('Creating Collection');\n    }\n\n}\n","/**\n * A class to hold a contributor.\n * @class\n * @classdesc Contributors are libraries and other organisations that\n *   contribute to Trove. Contributors usually have a \"name\", an \"id\" and\n *   a \"url\". They may also have a \"nuc\" (National Union Catalogue)\n *   identifier assigned to them. If you want more information, pass\n *   {@link RECLEVEL}.FULL into the \"reclevel\" option. See\n *   {@link ContributorList} to retrieve lists of Contributors.\n *\n * @param {Object} options The options object for the contributor.\n * @param {string} options.init The contributor ID for which\n *   to retrieve data on construction (optional).\n * @param {RECLEVEL} options.reclevel Whether to return the brief\n *   or full record (optional, default=brief).\n * @param {function} options.done The callback on receipt of data\n *   (optional).\n * @param {function} options.fail The callback on failure (optional).\n *\n * @property {string} id The Trove identifier for the contributor.\n * @property {string} url The Trove-relative URL.\n * @property {string} name The name of the contributor.\n * @property {string[]} nuc The list of NUCs for the contributor.\n * @property {string} shortname The short name of the contributor.\n * @property {number} totalholdings The number of holdings for the\n *   contributor.\n * @property {string} accesspolicy The access policy for the contributor.\n * @property {string} algentry Australian Libraries Gateway URL.\n * @property {Object} parent An object holding the parents of this\n *   contributor.\n * @property {string} parent.id The ID of the parent.\n * @property {string} parent.url The Trove-relative URL of the parent.\n * @property {string} parent.value The name of the parent.\n *\n */\nexport class Contributor {\n\n    constructor (options) {\n        // console.log('Creating Contributor');\n\n        // Save and remove init from options.\n        var init;\n        if (options.init !== undefined) {\n            init = options.init;\n            delete options.init;\n        }\n\n        // Save all other options in this object.\n        $.extend(this, options);\n\n        // If we know the identifier, get the data\n        if (init !== undefined) {\n            this.get({\n                id: init\n            });\n        }\n\n    }\n\n    process_done (\n        data,\n        textStatus,\n        jqXHR) {\n\n        // console.log('done status', jqXHR.status);\n\n        // Populate the object attributes.\n        $.extend(this, data.contributor);\n\n        if (this.done !== undefined) {\n            this.done(this);\n        }\n    }\n\n    process_fail (\n        jqXHR,\n        textStatus,\n        errorThrown) {\n\n        console.error('fail status', jqXHR.status, textStatus);\n\n        if (this.fail !== undefined) {\n            this.fail(this);\n        }\n    }\n\n    /**\n     * Get the parent Contributor for this Contributor. The \"parent\"\n     * attribute is only available if {@link RECLEVEL}.FULL\n     * was specified on requesting the data from Trove.\n     * @param {Object} options\n     * @param {function} options.done The callback on completion (optional).\n     * @param {function} options.fail The callback on failure (optional).\n     *\n     * @returns {Contributor}\n     */\n    get_parent (options) {\n\n        var done, fail;\n        if (options) {\n            done = options.done || this.done;\n            fail = options.fail || this.fail;\n        }\n\n        if (this.parent) {\n            return new Contributor({\n                init: this.parent.id,\n                done: done || this.done,\n                fail: fail || this.fail\n            });\n        }\n\n    }\n\n    /**\n     * Get the Contributor metadata from the Trove server. If \"done\" or \"fail\"\n     *   are set, they will be copied into the object, overwriting any\n     *   existing callbacks. This is also true for \"id\" and \"reclevel\".\n     * @param {Object} options The options object for the query.\n     * @param {string} options.id The Contributor ID (NUC code) for which\n     *   to retrieve data (optional if specified previously).\n     * @param {RECLEVEL} options.reclevel Whether to return the brief\n     *   or full record (optional).\n     * @param {function} options.done The callback on receipt of data\n     *   (optional).\n     * @param {function} options.fail The callback on failure (optional).\n     */\n    get (options) {\n        // console.log('Getting contributor');\n\n        // Override reclevel, done and fail if specified\n        if (options) {\n            this.id = options.id || this.id;\n            this.reclevel = options.reclevel || this.reclevel;\n            this.done = options.done || this.done;\n            this.fail = options.fail || this.fail;\n        }\n\n        var query_data = {\n            key: Trove.trove_key,\n            encoding: 'json'\n        };\n\n        // Full or brief\n        if (this.reclevel !== undefined) {\n            query_data.reclevel = this.reclevel;\n        }\n\n        $.ajax({\n            dataType: \"jsonp\",\n            url: Trove.API.CONTRIBUTOR + '/' + this.id,\n            data: query_data,\n            context: this\n        }).done(this.process_done).fail(this.process_fail);\n    }\n\n}\n"," import {Contributor} from \"./contributor\";\n\n/**\n * A container for a list of Contributors.\n * @class\n * @classdesc The ContributorList class is a wrapper around the\n *   \"http://api.trove.nla.gov.au/contributor\" API. If no \"terms\"\n *   are specified on construction, you will have to call the get()\n *   method to actually request the data from Trove. If the \"terms\"\n *   are specified on construction, the get() method will be\n *   called immediately.\n *\n * @param {Object} options An object specifying the options for\n *   this ContributorList.\n * @param {string} options.terms The search terms for which the contributor\n *   list will be returned (optional). If specified, the request\n *   will be made immediately. The search will be performed by the\n *   Trove servers on the NUC symbol and name.\n * @param {RECLEVEL} options.reclevel Whether to return the brief\n *   or full records (optional, default=brief).\n * @param {function} options.done The callback on receipt of data\n *   (optional).\n * @param {function} options.fail The callback on failure (optional).\n *\n * @property {Contributor[]} contributors The list of\n *   [Contributors]{@link Contributor} returned from the query.\n */\nexport class ContributorList {\n\n    constructor (options) {\n        // console.log('Creating ContributorList');\n\n        // Save the options in the object.\n        $.extend(this, options);\n\n        // The list of contributors, initially empty.\n        this.contributors = [];\n\n        // If terms is defined, get the data.\n        if (this.terms !== undefined) {\n            this.get();\n        }\n    }\n\n    process_done (\n        data,\n        textStatus,\n        jqXHR) {\n\n        // console.log('status', jqXHR.status);\n\n        // console.log(data.response.total);\n\n        // Clear the previous results.\n        this.contributors = [];\n\n        for (var index in data.response.contributor) {\n            // console.dir(data.response.contributor[index]);\n            this.contributors.push(new Contributor(\n                data.response.contributor[index]\n            ));\n        }\n\n        // console.log(\"total = \" + data.response.total);\n        if (this.done !== undefined) {\n            this.done(this);\n        }\n    }\n\n    process_fail (\n        jqXHR, textStatus, errorThrown) {\n\n        console.error('fail status', jqXHR.status);\n\n        if (this.fail !== undefined) {\n            this.fail(this);\n        }\n    }\n\n    /**\n     * Get the data from the Trove server. If \"done\" or \"fail\" are set,\n     *   they will be copied into the object, overwriting any\n     *   existing callbacks. This is also true for \"terms\" and \"reclevel\".\n     * @param {Object} options Options for the request.\n     * @param {string} options.terms The search terms for which to\n     *   request data (optional).\n     * @param {RECLEVEL} options.reclevel Whether to return the brief\n     *   or full records (optional).\n     * @param {function} options.done The callback on receipt of data\n     *   (optional).\n     * @param {function} options.fail The callback on failure (optional).\n     */\n    get (options) {\n        // console.log('Getting ContributorList');\n\n        if (options) {\n\n            this.reclevel = options.reclevel || this.reclevel;\n\n            // Override the terms\n            this.terms = options.terms || this.terms;\n\n            // Override the done callback\n            this.done = options.done || this.done;\n\n            // Override the fail callback\n            this.fail = options.fail || this.fail;\n        }\n\n        var query_data = {\n            key: Trove.trove_key,\n            encoding: 'json'\n        };\n\n        // Add search terms, if specified\n        if (this.terms !== undefined) {\n            query_data.q = this.terms;\n        }\n\n        // Full or brief\n        if (this.reclevel !== undefined) {\n            query_data.reclevel = this.reclevel;\n        }\n\n        $.ajax({\n            dataType: \"jsonp\",\n            url: Trove.API.CONTRIBUTOR,\n            data: query_data,\n            context: this\n        }).done(this.process_done).fail(this.process_fail);\n    }\n\n}\n","/**\n * A class to hold a list\n * @class\n *\n * @param {Object} options The options object for the list.\n * @param {(number|string)} options.init The list identifier for which\n *   to retrieve data on construction.\n * @param {function} options.done The callback on receipt of data\n *   (optional).\n * @param {function} options.fail The callback on failure (optional).\n * @param {RECLEVEL} options.reclevel Whether to return the brief\n *   or full record.\n * @param {INCLUDES[]} options.includes\n *\n */\nexport class List {\n\n    constructor (options) {\n        // console.log('Creating List');\n\n        // Save and remove init from options.\n        var init;\n        if (options.init !== undefined) {\n            init = options.init;\n            delete options.init;\n        }\n\n        // Save all other options in this object.\n        $.extend(this, options);\n\n        // If we know the identifier, get the data\n        if (init !== undefined) {\n            this.get({id: init});\n        }\n\n    }\n\n    process_done (data) {\n        $.extend(this, data.list);\n        if (this.done !== undefined) {\n            this.done(this);\n        }\n    }\n\n    process_fail (jqXHR, textStatus, errorThrown) {\n        console.error(textStatus);\n\n        if (this.fail !== undefined) {\n            this.fail(this);\n        }\n    }\n\n    /**\n     * Get the List metadata from the Trove server.\n     * @param {Object} options The options object for the query.\n     * @param {(number|string)} options.id The List ID for which\n     *   to retrieve data.\n     * @param {function} options.done The callback on receipt of data\n     *   (optional).\n     * @param {function} options.fail The callback on failure (optional).\n     * @param {RECLEVEL} options.reclevel Whether to return the brief\n     *   or full record.\n     * @param {INCLUDES[]} options.includes\n     */\n    get (options) {\n        // console.log('Getting list');\n\n        // Override reclevel, includes, done and fail if specified\n        if (options) {\n            this.id = options.id || this.id;\n            this.reclevel = options.reclevel || this.reclevel;\n            this.includes = options.includes || this.includes;\n            this.done = options.done || this.done;\n            this.fail = options.fail || this.fail;\n        }\n\n        var query_data = {\n            key: Trove.trove_key,\n            encoding: 'json'\n        };\n\n        // Full or brief\n        if (this.reclevel !== undefined) {\n            query_data.reclevel = this.reclevel;\n        }\n\n        // What to include\n        if ((this.includes !== undefined) &&\n            (Array.isArray(this.includes)) &&\n            (this.includes.length > 0)) {\n            query_data.include = this.includes.join(',');\n        }\n\n        $.ajax({\n            dataType: \"jsonp\",\n            url: Trove.API.LIST + this.id,\n            data: query_data,\n            context: this\n        }).done(this.process_done).fail(this.process_fail);\n    }\n    \n}\n","import {Work} from \"./work\";\n\n/**\n * A class to hold a map\n * @class\n * @augments Work\n * @param {Object} options\n */\nexport class Map extends Work {\n\n    constructor (options) {\n        super(options);\n        // console.log('Creating Map');\n    }\n\n}\n","import {Work} from \"./work\";\n\n/**\n * A class to hold music\n * @class\n * @augments Work\n * @param {Object} options\n */\nexport class Music extends Work {\n\n    constructor (options) {\n        super(options);\n        // console.log('Creating Music');\n    }\n\n}\n","import {NewspaperTitle} from \"./newspaper_title\";\n\n/**\n * A Class to hold newspaper articles.\n *\n * @class\n *\n * @param {Object} options An object specifying the default options\n * @param {number} options.init The article identifier for which\n *   to retrieve data on construction.\n * @param {function} options.done The callback on receipt of\n *   data (optional).\n * @param {function} options.fail The callback on failure (optional).\n * @param {RECLEVEL} options.reclevel Whether to return the brief\n *   or full record.\n * @param {INCLUDES[]} options.includes\n *\n * @property {string} id (brief) Trove newspaper article ID.\n * @property {string} heading (brief) The article heading.\n * @property {string} category (brief) The type of article\n * @property {Object} title (brief) The name and ID of the newspaper\n *   or periodical in which this article is found.\n * @property {string} title.id (brief) The Trove ID of the newspaper\n *   or periodical.\n * @property {string} title.value (brief) The name of the newspaper\n *   or periodical.\n * @property {string} edition (brief) Name of the special edition of\n *   the newspaper or periodical in which this article is found,\n *   if applicable.\n * @property {string} date (brief) The date of the issue in which\n *   this article was published.\n * @property {number} page (brief) The page on which this article\n *   appeared.\n * @property {number} pageSequence (brief)\n * @property {string} pageLabel (reclevel=full)\n * @property {string} status (brief) Included is the article is\n *   not currently available.\n * @property {string} relevance (brief, following search) How relevant\n *   this article is to the search.\n * @property {string} relevance.score (brief, following search) A\n *   numeric representation of how relevant this article is to the search.\n * @property {string} snippet (brief, following search) A small amount\n *   of text containing one or more of the search terms.\n * @property {string} troveUrl (brief)\n * @property {string} trovePageUrl (brief)\n * @property {string} supplement (reclevel=full)\n * @property {string} section (reclevel=full)\n * @property {string} illustrated (reclevel=full)\n * @property {number} wordCount (reclevel=full)\n * @property {number} correctionCount (reclevel=full)\n * @property {number} listCount (reclevel=full)\n * @property {number} tagCount (reclevel=full)\n * @property {number} commentCount (reclevel=full)\n * @property {Object[]} tag (include=tags)\n * @property {string} tag.lastupdated\n * @property {string} tag.value\n * @property {Object[]} comment (include=comments)\n * @property {string} comment.by\n * @property {string} comment.lastupdated\n * @property {string} comment.value\n * @property {Object[]} list (include=lists)\n * @property {string} list.by\n * @property {string} list.lastupdated\n * @property {string} list.url\n * @property {Object} lastCorrection (reclevel=full)\n * @property {string} lastCorrection.by (reclevel=full)\n * @property {string} lastCorrection.lastupdated (reclevel=full)\n * @property {string} identifier (reclevel=full)\n * @property {string} pdf (reclevel=full)\n * @property {string} articleText (include=articletext)\n */\nexport class NewspaperArticle {\n\n    constructor (options) {\n        // console.log('Creating NewspaperArticle');\n\n        // Save and remove init from options.\n        var init;\n        if (options.init !== undefined) {\n            init = options.init;\n            delete options.init;\n        }\n\n        // Save all other options in this object.\n        $.extend(this, options);\n\n        // If we know the identifier, get the data\n        if (init !== undefined) {\n            this.get({id: init});\n        }\n    }\n\n    process_done (data) {\n        $.extend(this, data.article);\n        if (this.done !== undefined) {\n            this.done(this);\n        }\n    }\n\n    process_fail (\n            jqXHR, textStatus, errorThrown) {\n\n        console.error(textStatus);\n\n        if (this.fail !== undefined) {\n            this.fail(this);\n        }\n    }\n\n    /**\n     * Retrieve article information from Trove based on identifier.\n     *\n     * @param {Object} options The options object for the query.\n     * @param {number} options.id The article ID for which to\n     *   retrieve data.\n     * @param {function} options.done The callback on receipt of data\n     *   (optional).\n     * @param {function} options.fail The callback on failure (optional).\n     * @param {RECLEVEL} options.reclevel Whether to return the brief\n     *   or full record.\n     * @param {INCLUDES[]} options.includes\n     */\n    get (options) {\n        // console.log('Getting NewspaperArticle');\n        // http://api.trove.nla.gov.au/newspaper/18342701?key=<INSERT KEY>\n\n        // Override reclevel, includes, done and fail if specified\n        if (options) {\n            this.id = options.id || this.id;\n            this.reclevel = options.reclevel || this.reclevel;\n            this.includes = options.includes || this.includes;\n            this.done = options.done || this.done;\n            this.fail = options.fail || this.fail;\n        }\n\n        var query_data = {\n            key: Trove.trove_key,\n            encoding: 'json'\n        };\n\n        // Full or brief\n        if (this.reclevel !== undefined) {\n            query_data.reclevel = this.reclevel;\n        }\n\n        // What to include\n        if ((this.includes !== undefined) &&\n            (Array.isArray(this.includes)) &&\n            (this.includes.length > 0)) {\n            query_data.include = this.includes.join(',');\n        }\n\n        $.ajax({\n            dataType: \"jsonp\",\n            url: Trove.API.NP_ARTICLE + this.id,\n            data: query_data,\n            context: this\n        }).done(this.process_done).fail(this.process_fail);\n    }\n\n    /**\n     * Retrieve newspaper title information for the article\n     *\n     * @param {Object} options The options object for the query.\n     * @param {function} options.done The callback on receipt of data\n     *   (optional).\n     * @returns {NewspaperTitle} The NewspaperTitle object that\n     *   contains the NewspaperArticle.\n     */\n    get_newspaper (options) {\n        // console.log('Get NewspaperTitle for Article');\n\n        var done;\n        if (options) done = options.done || this.done;\n\n        if (this.title !== undefined) {\n            if (this.title.id !== undefined) {\n                return new NewspaperTitle({\n                    init: this.title.id,\n                    done: done || this.done\n                });\n            }\n        }\n    }\n\n}\n","import {NewspaperTitle} from \"./newspaper_title\";\n\n/**\n * A list of Newspapers for a specific state or all states.\n * @class\n * @classdesc The NewspaperList class is a wrapper around the\n *   \"http://api.trove.nla.gov.au/newspaper/titles\" API. If no state\n *   is specified on construction, you will have to call the get()\n *   method to actually request the data from Trove. If the state\n *   is specified on construction, the get() method will be\n *   called immediately.\n *\n *   Currently the Trove servers only give basic information on\n *   each newspaper title returned. If you want the list of years and\n *   issues, you'll have to call the {@link NewspaperTitle}.get()\n *   method directly, specifying includes and range.\n * @param {Object} options An object specifying the options for\n *   this NewspaperList.\n * @param {STATES} options.state The state for which the newspaper\n *   list will be returned (optional). If specified, the request\n *   will be made immediately.\n * @param {function} options.done The callback on receipt of data\n *   (optional).\n * @param {function} options.fail The callback on failure (optional).\n * @property {NewspaperTitle[]} newspapers The list of\n *   [NewspaperTitles]{@link NewspaperTitle} returned from the query.\n */\nexport class NewspaperList {\n\n    constructor (options) {\n        // console.log('Creating NewspaperList');\n\n        // Save the options in the object.\n        $.extend(this, options);\n\n        // The list of newspapers, initially empty.\n        this.newspapers = [];\n\n        // If state is defined, get the data.\n        if (this.state !== undefined) {\n            this.get();\n        }\n    }\n\n    process_done (\n        data, textStatus, jqXHR) {\n\n        // console.log('status', jqXHR.status);\n\n        // Clear the previous results.\n        this.newspapers = [];\n\n        for (var index in data.response.records.newspaper) {\n            // console.dir(data.response.records.newspaper[index]);\n            this.newspapers.push(new NewspaperTitle(\n                data.response.records.newspaper[index]\n            ));\n        }\n\n        // console.log(\"total = \" + data.response.records.total);\n        if (this.done !== undefined) {\n            this.done(this);\n        }\n    }\n\n    process_fail (\n        jqXHR, textStatus, errorThrown) {\n\n        console.error(textStatus);\n\n        if (this.fail !== undefined) {\n            this.fail(this);\n        }\n    }\n\n    /**\n     * Get the data from the Trove server. If done or fail are set,\n     *   they will be copied into the object, overwriting any\n     *   existing callbacks.\n     * @param {Object} options Options for the request.\n     * @param {STATES} options.state The state for which to\n     *   request data (optional). If not set, or set to ALL,\n     *   all states will be returned.\n     * @param {function} options.done The callback on receipt of data\n     *   (optional).\n     * @param {function} options.fail The callback on failure (optional).\n     */\n    get (options) {\n        // console.log('Getting NewspaperList');\n\n        if (options) {\n            // Override the done callback\n            this.done = options.done || this.done;\n\n            // Override the fail callback\n            this.fail = options.fail || this.fail;\n\n            // Override the state\n            this.state = options.state || this.state;\n        }\n\n        var query_data = {\n            key: Trove.trove_key,\n            encoding: 'json'\n        };\n\n        if ((this.state !== undefined) && (this.state != Trove.STATES.ALL)) {\n            query_data.state = this.state;\n        }\n\n        $.ajax({\n            dataType: \"jsonp\",\n            url: Trove.API.NP_TITLES,\n            data: query_data,\n            context: this\n        }).done(this.process_done).fail(this.process_fail);\n    }\n\n}\n","var STATEABBR = {\n    'ACT': 'ACT',\n    'National': 'NATIONAL',\n    'New South Wales': 'NSW',\n    'Northern Territory': 'NT',\n    'Queensland': 'QLD',\n    'South Australia': 'SA',\n    'Tasmania': 'TAS',\n    'Victoria': 'VIC',\n    'Western Australia': 'WA'\n};\n\n/**\n * A class to hold an instance of a newspaper title.\n * @class\n * @classdesc The NewspaperTitle class is a wrapper around the\n *   \"http://api.trove.nla.gov.au/newspaper/title\" API.\n *   The {@link NewspaperList} class will return a list of\n *   these objects for a state (or all states).\n * @param {Object} options The options used on construction. Every\n *   object property can be set on construction through this parameter.\n * @param {(number|string)} options.init If specified, will request\n *   the data immediately.\n * @property {string} id The Trove identifier for the newspaper title.\n * @property {string} title Name of the newpaper (or magazine).\n * @property {string} state The state in which the newspaper title was\n *   published.\n * @property {string} stateabbr An abbreviation for the state.\n * @property {number} issn International Standard Serial Number.\n * @property {string} troveURL A link to view the newspaper title in Trove.\n * @property {string} startDate The earliest publication date of this\n *   newspaper title available in Trove.\n * @property {string} endDate The most recent publication date of this\n *   newspaper title available in Trove.\n * @property {Object[]} year A list of the publication years for this newspaper\n *   title that are included in Trove.\n * @property {string} year.date A year this newspaper title was published\n * @property {string} year.issuecount The number of issues published in this\n *   year.\n * @property {Object[]} year.issue List of issues within the specified range.\n * @property {string} year.issue.id The Trove issue identifier.\n * @property {string} year.issue.date The data of the issue.\n * @property {string} year.issue.url The Trove URL for the issue.\n */\nexport class NewspaperTitle {\n\n    constructor (options) {\n        // console.log('Creating NewspaperTitle ');\n\n        // Save and remove init from options.\n        var init;\n        if (options.init !== undefined) {\n            init = options.init;\n            delete options.init;\n        }\n\n        // Save all other options as part of this object.\n        $.extend(this, options);\n        if (this.state) this.stateabbr = STATEABBR[this.state];\n\n        // If init was specified, treat it as the identifier.\n        if (init !== undefined) {\n            this.get({id: init});\n        }\n    }\n\n    /**\n     * Get information about the specified newspaper title from Trove.\n     * @param {Object} options\n     * @param {(number|string)} options.id The identifier of the newspaper\n     *   title to retrieve. If not specified, will fall back to the id set\n     *   on construction. (optional)\n     * @param {INCLUDES[]} options.includes The data to include in\n     *   the results. Trove currently only supports\n     *   {@link INCLUDES}.YEARS.\n     * @param {string} options.range If YEARS is included, return a list of\n     *   publication dates in the given range. Of the form: YYYYMMDD-YYYYMMDD.\n     */\n    get (options) {\n        // http://api.trove.nla.gov.au/newspaper/title/35?encoding=json\n\n        if (options) {\n            this.id = options.id || this.id;\n            this.range = options.range || this.range;\n            this.includes = options.includes || this.includes;\n            this.done = options.done || this.done;\n            this.fail = options.fail || this.fail;\n        }\n\n        // console.log('Getting NewspaperTitle', this.id);\n\n        var query_data = {\n            key: Trove.trove_key,\n            encoding: 'json'\n        };\n\n        // What to include\n        if ((this.includes !== undefined) &&\n            (Array.isArray(this.includes)) &&\n            (this.includes.length > 0)) {\n            query_data.include = this.includes.join(',');\n        }\n\n        // What range\n        if (this.range !== undefined) {\n            query_data.range = this.range;\n        }\n\n        // console.log(JSON.stringify(query_data, null, '\\t'));\n\n        $.ajax({\n            dataType: \"jsonp\",\n            url: Trove.API.NP_TITLE + this.id,\n            data: query_data,\n            context: this\n        }).done(function(data, textStatus, jqXHR) {\n            // console.log('Got NewspaperTitle');\n            // console.log('status', jqXHR.status);\n            $.extend(this, data.newspaper);\n            if (this.state) this.stateabbr = STATEABBR[this.state];\n            if (this.done !== undefined) {\n                this.done(this);\n            }\n        });\n    }\n\n}","/**\n * A class to hold a person.\n * Please note that the Trove API does not currently support People\n * except as a result of a search.\n * @class\n *\n * @param {Object} options The options object for the Person.\n * @param {(number|string)} options.init The Person identifier for which\n *   to retrieve data on construction.\n * @param {function} options.done The callback on receipt of data\n *   (optional).\n * @param {function} options.fail The callback on failure (optional).\n * @param {RECLEVEL} options.reclevel Whether to return the brief\n *   or full record.\n * @param {INCLUDES[]} options.includes\n *\n * @property {string} id The Trove identifier for the person\n * @property {string} troveUrl The full URL for the person\n * @property {string} url The relative URL for the person\n *\n */\nexport class Person {\n    constructor (options) {\n        // console.log('Creating Person');\n\n        // Save and remove init from options.\n        var init;\n        if (options.init !== undefined) {\n            init = options.init;\n            delete options.init;\n        }\n\n        // Save all other options in this object.\n        $.extend(this, options);\n\n        // If we know the identifier, get the data\n        if (init !== undefined) {\n            this.get({id: init});\n        }\n\n    }\n\n    process_done (data) {\n        $.extend(this, data.people);\n        if (this.done !== undefined) {\n            this.done(this);\n        }\n    }\n\n    process_fail (jqXHR, textStatus, errorThrown) {\n        console.error('Error getting person:', textStatus);\n\n        if (this.fail !== undefined) {\n            this.fail(this);\n        }\n    }\n\n    /**\n     * Get the Person metadata from the Trove server.\n     * Currently not supported by Trove.\n     * @param {Object} options The options object for the query.\n     * @param {(number|string)} options.id The person ID for which\n     *   to retrieve data.\n     * @param {function} options.done The callback on receipt of data\n     *   (optional).\n     * @param {function} options.fail The callback on failure (optional).\n     * @param {RECLEVEL} options.reclevel Whether to return the brief\n     *   or full record.\n     * @param {INCLUDES[]} options.includes\n     */\n    get (options) {\n        // console.log('Getting person');\n\n        // Override reclevel, includes, done and fail if specified\n        if (options) {\n            this.id = options.id || this.id;\n            this.reclevel = options.reclevel || this.reclevel;\n            this.includes = options.includes || this.includes;\n            this.done = options.done || this.done;\n            this.fail = options.fail || this.fail;\n        }\n\n        var query_data = {\n            key: Trove.trove_key,\n            encoding: 'json'\n        };\n\n        // Full or brief\n        if (this.reclevel !== undefined) {\n            query_data.reclevel = this.reclevel;\n        }\n\n        // What to include\n        if ((this.includes !== undefined) &&\n            (Array.isArray(this.includes)) &&\n            (this.includes.length > 0)) {\n            query_data.include = this.includes.join(',');\n        }\n\n        $.ajax({\n            dataType: \"jsonp\",\n            url: Trove.API.PEOPLE + this.id,\n            data: query_data,\n            context: this\n        }).done(this.process_done).fail(this.process_fail);\n    }\n\n}","import {Work} from \"./work\";\n\n/**\n * A class to hold a picture\n * @class\n * @augments Work\n * @param {Object} options\n */\nexport class Picture extends Work {\n\n    constructor (options) {\n        super(options);\n        // console.log('Creating Picture');\n    }\n\n}\n","import {Article} from \"./article\";\nimport {Book} from \"./book\";\nimport {Collection} from \"./collection\";\nimport {List} from \"./list\";\nimport {Map as TroveMap} from \"./map\";\nimport {Music} from \"./music\";\nimport {NewspaperArticle} from \"./newspaper_article\";\nimport {Person} from \"./person\";\nimport {Picture} from \"./picture\";\n\n// Mapping of zones to constructors for those zones.\n// Used by Search to create objects on receipt of results.\nexport var CONSTRUCTORS = {\n    article: Article,\n    book: Book,\n    collection: Collection,\n    list: List,\n    map: TroveMap,\n    music: Music,\n    newspaper: NewspaperArticle,\n    people: Person,\n    picture: Picture,\n    // contributor: Contributor,\n    // newspaper_title: NewspaperTitle,\n    // work: Work,\n};\n\n\n/**\n * An object to perform searches\n * @class\n * @param {Object} options An object specifying the options for this\n *   Search\n * @param {ZONES[]} options.zones The list of zones to search\n * @param {function} options.done The callback on receipt of data\n *   (optional).\n * @param {function} options.fail The callback on failure (optional).\n * @param {string} options.terms The search terms\n *\n * @property {Object} response The raw response from the server.\n * @property {Object[]} items The object containing the items created from\n *   the raw response.\n * @property {FACETS[]} facets The list of facets to include in\n *   the data returned.\n * @property {Object} limits The limits imposed on the search.\n */\nexport class Search {\n\n    constructor (options) {\n        // console.log('Creating Search');\n\n        // copy everything from options to this object\n        $.extend(this, options);\n\n        // The raw response from the query\n        this.response = undefined;\n\n        this.items = {};\n\n        // The parameters of the last search\n        // Used to request previous and next results.\n        this._last_search = undefined;\n\n        this.facets = [];\n        this.limits = {};\n\n    }\n\n    /**\n     * Return the array of items returned by the most recent query\n     *   in the specified zone.\n     * @param {ZONES} zone The zone for which the array should be\n     *   returned.\n     * @returns {Object[]}\n     */\n    zone_list (zone) {\n        return this.items[zone] || [];\n    }\n\n    /*\n     * Process the returned data, creating an object for each item.\n     */\n    process_done (data) {\n        // console.log('Got Search Query');\n        var zone_items;\n        var zone_name;\n\n        this.items = {}; // Clear the last lot of results\n        this.response = data.response; // Store the raw response\n\n        for (var zone_num in this.response.zone) {\n            zone_name = this.response.zone[zone_num].name;\n            // console.log(zone_name);\n\n            this.items[zone_name] = []; // Create an empty list for this zone\n\n            zone_items = this.response.zone[zone_num].records[\n                Trove.SEARCH_RECORDS[zone_name]];\n\n            for (var item_num in zone_items) {\n                this.items[zone_name].push(new CONSTRUCTORS[\n                    zone_name](zone_items[item_num]));\n            }\n        }\n\n        if (this.done !== undefined) {\n            this.done(this);\n        }\n    }\n\n    process_fail (jqXHR, textStatus, errorThrown) {\n        console.error(textStatus);\n\n        if (this.fail !== undefined) {\n            this.fail(this);\n        }\n    }\n\n    /**\n     * Remove the named facet.\n     * @param {FACETS} facet The name of the facet to remove\n     */\n    remove_facet (facet) {\n        if (this.facets.indexOf(facet) != -1) {\n            this.facets.splice(this.facets.indexOf(facet), 1);\n        }\n    }\n\n    /**\n     * Add the named facet.\n     * @param {FACETS} facet The name of the facet to add\n     */\n    add_facet (facet) {\n        this.facets.push(facet);\n    }\n\n    /**\n     * Clear the date range limits.\n     */\n    clear_date_range_limit () {\n        if (this.limits.decade !== undefined) delete this.limits.decade;\n        if (this.limits.year !== undefined) delete this.limits.year;\n        if (this.limits.month !== undefined) delete this.limits.month;\n    }\n\n    /**\n     * Set the limits on the date range returned\n     * @param {string} start The date limit, one of: YYY for decade,\n     *   YYYY for year, or YYYY-MM for month\n     */\n    limit_date_range (start) {\n        var split_start = start.split('-');\n        if (split_start.length >= 1) {\n            if (split_start[0].length == 3) {\n                this.limits.decade = split_start[0];\n            } else if (split_start[0].length == 4) {\n                this.limits.decade = split_start[0].substr(0, 3);\n                this.limits.year = split_start[0];\n            }\n        }\n\n        if (split_start.length >= 2) {\n            this.limits.month = split_start[1];\n        }\n\n    }\n\n    clear_category_limit () {\n        if (this.limits.category !== undefined) delete this.limits.category;\n    }\n\n    limit_category (category) {\n        this.limits.category = category;\n    }\n\n\n    /**\n     * Query the Trove database.\n     *\n     * @param {Object} options An object containing, at least, the terms to\n     *   search for.\n     * @param {function} options.done The callback on receipt of data\n     *   (optional).\n     * @param {function} options.fail The callback on failure (optional).\n     * @param {ZONES[]} options.zones The list of zones to search\n     *   (mandatory).\n     * @param {string} options.terms The search terms (mandatory).\n     * @param {number} options.start Return records starting at this point\n     *  (optional, default=0).\n     * @param {number} options.number Return this number of records\n     *   (max. 100, optional, default=20).\n     * @param {SORTBY} options.sort Sort the results according to this\n     *   parameter (optional, default={@link SORTBY}.RELEVANCE).\n     * @param {RECLEVEL} options.reclevel Whether to return the brief\n     *   or full record.\n     * @param {INCLUDES[]} options.includes\n     * @param {Object} options.limits Limit the search results\n     *   (optional, see {@link LIMITS}).\n     * @param {FACETS[]} options.facets\n     */\n    query (options) {\n\n        // console.log('Querying Search');\n\n        if (options === undefined) {\n            console.error('options is undefined');\n            return;\n        }\n\n        // Override reclevel, includes, done and fail if specified\n        this.reclevel = options.reclevel || this.reclevel;\n        this.includes = options.includes || this.includes;\n        this.done = options.done || this.done;\n        this.fail = options.fail || this.fail;\n\n        // Override zones, terms and facets if specified.\n        this.zones = options.zones || this.zones;\n        this.terms = options.terms || this.terms;\n        this.facets = options.facets || this.facets;\n\n        // Get the zone or zones for the query.\n        // The default is ZONES.ALL.\n        var zones = Trove.ZONES.ALL;\n        if (Array.isArray(this.zones)) {\n            zones = this.zones.join(',');\n        }\n\n        var query_data = {\n            key: Trove.trove_key,\n            encoding: 'json',\n            zone: zones,\n            q: this.terms,\n            s: 0,\n            n: 20\n        };\n\n        // Where to start\n        if (options.start !== undefined) {\n            query_data.s = options.start;\n        }\n\n        // How many to return\n        if (options.number !== undefined) {\n            query_data.n = options.number;\n        }\n\n        // In what sort order\n        if (options.sort !== undefined) {\n            query_data.sortby = options.sort;\n        }\n\n        // Full or brief\n        if (options.reclevel !== undefined) {\n            query_data.reclevel = options.reclevel;\n        }\n\n        // What to include\n        if ((this.includes !== undefined) &&\n            (Array.isArray(this.includes)) &&\n            (this.includes.length > 0)) {\n            query_data.include = this.includes.join(',');\n        }\n\n        // What facets of the data to return\n        if ((this.facets !== undefined) &&\n            (Array.isArray(this.facets)) &&\n            (this.facets.length > 0)) {\n            query_data.facet = this.facets.join(',');\n        }\n\n        // What limits apply to the search\n        var limits;\n        var limit_keys;\n        if (options.limits !== undefined) {\n            limit_keys = Object.keys(options.limits);\n            limits = options.limits;\n        } else {\n            limit_keys = Object.keys(this.limits);\n            limits = this.limits;\n        }\n        if (limit_keys.length > 0) {\n            for (var index in limit_keys) {\n                query_data['l-' + limit_keys[index]] =\n                    limits[limit_keys[index]];\n            }\n        }\n\n        this._last_search = query_data;\n\n        $.ajax({\n            dataType: \"jsonp\",\n            url: Trove.API.QUERY,\n            data: query_data,\n            context: this\n        }).done(this.process_done).fail(this.process_fail);\n\n    }\n\n    /**\n     * Repeat the last query, with a delta applied to the start.\n     * @param {Object} options Options to be applied to the query\n     * @param {function} options.done The callback on receipt of data\n     *   (optional).\n     * @param {function} options.fail The callback on failure (optional).\n     * @param {number} delta The change to be applied to the start number\n     *   (positive or negative).\n     */\n    requery (options, delta) {\n\n        if (options) {\n            // Override the done callback\n            this.done = options.done || this.done;\n\n            // Override the fail callback\n            this.fail = options.fail || this.fail;\n        }\n\n        if (this._last_search !== undefined) {\n\n            this._last_search.s = this._last_search.s + delta;\n\n            $.ajax({\n                dataType: \"jsonp\",\n                url: Trove.API.QUERY,\n                data: this._last_search,\n                context: this\n            }).done(this.process_done).fail(this.process_fail);\n        }\n    }\n\n    /**\n     * Request the next search results\n     * @param {Object} options Options to be applied to the query\n     * @param {function} options.done The callback on receipt of data\n     *   (optional).\n     * @param {function} options.fail The callback on failure (optional).\n     */\n    next (options) {\n        if (this._last_search !== undefined) {\n            this.requery(options, this._last_search.n);\n        }\n    }\n\n    /**\n     * Request the previous search results\n     * @param {Object} options Options to be applied to the query\n     * @param {function} options.done The callback on receipt of data\n     *   (optional).\n     * @param {function} options.fail The callback on failure (optional).\n     */\n    previous (options) {\n        if (this._last_search !== undefined) {\n            this.requery(options, -this._last_search.n);\n        }\n    }\n\n    newspaper_articles () {\n        // The Search object just\n        return [];\n    }\n\n}","/**\n * @copyright Chris Willoughby 2015\n */\nexport {Article} from \"./article\";\nexport {Book} from \"./book\";\nexport {Collection} from \"./collection\";\nexport {Contributor} from \"./contributor\";\nexport {ContributorList} from \"./contributor_list\";\nexport {List} from \"./list\";\nexport {Map} from \"./map\";\nexport {Music} from \"./music\";\nexport {NewspaperArticle} from \"./newspaper_article\";\nexport {NewspaperList} from \"./newspaper_list\";\nexport {NewspaperTitle} from \"./newspaper_title\";\nexport {Person} from \"./person\";\nexport {Picture} from \"./picture\";\nexport {Search} from \"./search\";\n\n\n\n    //Public Property\n    export var trove_key = '';\n\n    /**\n     * @param {string} key The Trove API key given to you by the National\n     *   Library of Australia.\n     *\n     * This function should be called before any queries are made to the\n     *   Trove servers.\n     */\n    export function init(key) {\n        // console.log(\"INIT called\");\n        trove_key = key;\n    }\n\n    var ENC = '&encoding=json';\n\n    /**\n     * Enumeration for zones, can include multiple as a list\n     * @namespace\n     * @readonly\n     * @enum {string}\n     * @property {string} BOOK The zone for books.\n     * @property {string} PICTURE The zone for pictures\n     * @property {string} ARTICLE The zone for journal articles\n     * @property {string} MUSIC The zone for music\n     * @property {string} MAP The zone for maps\n     * @property {string} COLLECTION The zone for collections\n     * @property {string} NEWSPAPER The zone for newspapers\n     * @property {string} LIST The zone for lists\n     * @property {string} PEOPLE The zone for people\n     * @property {string} ALL All of the above\n     */\n    export var ZONES = {\n        BOOK: 'book',\n        PICTURE: 'picture',\n        ARTICLE: 'article',\n        MUSIC: 'music',\n        MAP: 'map',\n        COLLECTION: 'collection',\n        NEWSPAPER: 'newspaper',\n        LIST: 'list',\n        PEOPLE: 'people',\n        ALL: 'all'\n    };\n\n    /**\n     * Enumeration for formats.\n     * Used for facets and limits.\n     * @readonly\n     * @enum {string}\n     */\n    export var FORMATS = {\n        WEBSITE: 'Archived website',\n        ARTWORK: 'Art work',\n        ARTICLE: 'Article',\n        ARTICLEABSTRACT: 'Article/Abstract',\n        ARTICLECHAPTER: 'Article/Book chapter',\n        ARTICLEPAPER: 'Article/Conference paper',\n        ARTICLEJOURNAL: 'Article/Journal or magazine article',\n        ARTICLEOTHER: 'Article/Other article',\n        ARTICLEREPORT: 'Article/Report',\n        ARTICLEREVIEW: 'Article/Review',\n        ARTICLEWORKING: 'Article/Working paper',\n        AUDIOBOOK: 'Audio book',\n        BOOK: 'Book',\n        BOOKBRAILLE: 'Book/Braille',\n        BOOKILLUSTRATED: 'Book/Illustrated',\n        BOOKLARGEPRINT: 'Book/Large print',\n        PROCEEDINGS: 'Conference Proceedings',\n        DATASET: 'Data set',\n        MAP: 'Map',\n        MAPAERIAL: 'Map/Aerial photograph',\n        MAPATLAS: 'Map/Atlas',\n        MAPBRAILLE: 'Map/Braille',\n        MAPELECTRONIC: 'Map/Electronic',\n        MAPGLOBE: 'Map/Globe or object',\n        MAPLARGE: 'Map/Large print',\n        MAPSERIES: 'Map/Map series',\n        MAPMICROFORM: 'Map/Microform',\n        MAPSINGLE: 'Map/Single map',\n        OBJECT: 'Object',\n        PERIODICAL: 'Periodical',\n        PERIODICALJOURNAL: 'Periodical/Journal, magazine, other',\n        PERIODICALNEWSPAPER: 'Periodical/Newspaper',\n        PHOTO: 'Photograph',\n        POSTER: 'Poster, chart, other',\n        PUBLISHED: 'Published',\n        SHEETMUSIC: 'Sheet music',\n        SOUND: 'Sound',\n        SOUNDTALK: 'Sound/Interview, lecture, talk',\n        SOUNDOTHER: 'Sound/Other sound',\n        SOUNDMUSIC: 'Sound/Recorded music',\n        THESIS: 'Thesis',\n        UNPUBLISHED: 'Unpublished',\n        VIDEO: 'Video',\n        VIDEOCAPTIONED: 'Video/Captioned'\n    };\n\n    /**\n     * Enumeration for availability.\n     * Used for facets and limits.\n     * @readonly\n     * @enum {string}\n     */\n    export var AVAILABILITIES = {\n        /** Online. */\n        ONLINE: 'y',\n        /** Freely accessible online. */\n        FREE_ACCESS: 'y/f',\n        /** Payment, subscription or membership required. */\n        MEMBERSHIP: 'y/r',\n        /** Subscription required. */\n        SUBSCRIPTION: 'y/s',\n        /** Possibly online. */\n        POSSIBLY: 'y/u'\n    };\n\n    /**\n     *\n     * Used for facets and limits.\n     * @readonly\n     * @enum {string}\n     */\n    export var VENDORS = {};\n\n    /**\n     *\n     * Used for facets and limits.\n     * @readonly\n     * @enum {string}\n     */\n    export var AUDIENCES = {\n        TRADE: \"Trade\",\n        GENERAL: \"General\",\n        ACADEMIC: \"Academic\",\n        PROFESSIONAL: \"Professional\",\n        CHILDREN: \"Children's\",\n        CHILDRENUPPER: \"Children's - Upper elementry\",\n        CHILDRENLOWER: \"Children's - Lower elementry\"\n    };\n\n    /**\n     * Enumeration for NewspaperArticle categories. Returned as part of the\n     *   brief record for NewspaperArticle, and may also be used to limit\n     *   the results of a search using {@link LIMITS}.CATEGORY.\n     *   Used for facets and limits.\n     * @readonly\n     * @enum {string}\n     */\n    export var CATEGORIES = {\n        /** Classified as an article. */\n        ARTICLE: 'Article',\n        /** Classified as advertising. */\n        ADVERTISING: 'Advertising',\n        /** Classified as a list. */\n        LISTS: 'Detailed lists, results, guides',\n        /** Classified as family notices. */\n        FAMILY_NOTICES: 'Family Notices',\n        /** Classified as literature. */\n        LITERATURE: 'Literature'\n    };\n\n    /**\n     * Enumeration for facets.\n     * Facets are categories that describe the results for your search. For\n     *   example, if you ask for the decade facet, the response will include\n     *   the list of decades your results span across, and how many results\n     *   are found in each decade.\n     * @readonly\n     * @enum {string}\n     */\n    export var FACETS = {\n        /**\n         * (book, picture, article, music, map, collection)\n         *   The format of the resource. For example, is it a book or a\n         *   piece of sheet music? See {@link FORMATS}.\n         */\n        FORMAT: 'format',\n        /**\n         * (book, picture, article, music, map, collection, newspaper, list)\n         *   Publication decade. e.g 199 represents 1990 – 1999.\n         */\n        DECADE: 'decade', //YYY\n        /**\n         * (book, picture, article, music, map, collection, newspaper, list)\n         *   Publication year. For newspapers, only available if the decade\n         *   facet is also applied.\n         */\n        YEAR: 'year',\n        /**\n         * (newspaper)\n         *   Publication month. Only available if the year facet is also\n         *   applied\n         */\n        MONTH: 'month', //\n        /**\n         * (book, picture, article, music, map, collection)\n         */\n        LANGUAGE: 'language',\n        /**\n         * (book, picture, article, music, map, collection, list)\n         *   Whether the item is online or not. See\n         *   {@link AVAILABILITIES}.\n         */\n        AVAILABILITY: 'availability',\n        /**\n         * (book, picture, article, music, map, collection)\n         *   Works identified as published primarily in Australia, or\n         *   written by Australians\n         */\n        AUSTRALIAN: 'australian',\n        /**\n         * (collection)\n         */\n        OCCUPATION: 'occupation',\n        /**\n         * (map) Map scale\n         */\n        ZOOM: 'zoom',\n        /**\n         * (article) Database code\n         */\n        VENDORDB: 'vendordb',\n        /**\n         * (article) The vendor who sells subscriptions to access a database\n         *   containing these articles. See {@link VENDORS}.\n         */\n        VENDOR: 'vendor',\n        /**\n         * (article) Only applies to articles from Gale. See\n         *   {@link AUDIENCES}.\n         */\n        AUDIENCE: 'audience',\n        /**\n         * (newspaper) The newspaper title id.\n         */\n        TITLE: 'title',\n        /**\n         * (newspaper) Newspaper article category. See\n         *   {@link CATEGORIES}.\n         */\n        CATEGORY: 'category',\n        /**\n         * (newspaper) Is a newspaper article illustrated?\n         */\n        ILLUSTRATED: 'illustrated',\n        /**\n         * (newspaper) Type of illustration for newspaper article. Only available if illustrated facet is applied\n         */\n        ILLTYPE: 'illtype',\n        /**\n         * (newspaper) Newspaper article word count.\n         */\n        WORD: 'word',\n        /**\n         * All of the above.\n         */\n        ALL: 'all'\n    };\n\n    /**\n     * Enumeration for limiting the results of a search.\n     * @readonly\n     * @enum {string}\n     */\n    export var LIMITS = {\n        /** Limit by format. */\n        FORMAT: 'l-format',\n        /** Limit by decade. In the form of YYY e.g. 190 is the 1900s. */\n        DECADE: 'l-decade',\n        /** Limit by year: limit by decade must also be set. In the form of YYYY. */\n        YEAR: 'l-year',\n        /** Limit by month: limit by decade and year must also be set. Only applies to the newspaper zone. */\n        MONTH: 'l-month',\n        /** Limit by language */\n        LANGUAGE: 'l-language',\n        /** Limit by availability (whether online or not) */\n        AVAILABILITY: 'l-availability',\n        /** Limit by whether the work is Australian */\n        AUSTRALIAN: 'l-australian',\n        /** Limit by occupation. Only applies to the collection zone. */\n        OCCUPATION: 'l-occupation',\n        /** Limit by map scale. Only applies to the map zone. */\n        ZOOM: 'l-zoom',\n        /** Limit by vendor database code. */\n        VENDORDB: 'l-vendordb',\n        /** Limit by vendor. */\n        VENDOR: 'l-vendor',\n        /** Limit by audience */\n        AUDIENCE: 'l-audience',\n        /** Limit by title */\n        TITLE: 'l-title',\n        /** Limit by category */\n        CATEGORY: 'l-category',\n        /** Limit by illustration */\n        ILLUSTRATED: 'l-illustrated',\n        /** Limit by illustration type */\n        ILLTYPE: 'l-illtype',\n        /** Limit by word */\n        WORD: 'l-word',\n        /** Limit by all */\n        ALL: 'l-all'\n    };\n\n    /**\n     * Enumeration for sort order.\n     * @readonly\n     * @enum {string}\n     */\n    export var SORTBY = {\n        /** Sort by date (descending). */\n        DATEDESC: 'datedesc',\n        /** Sort by date (ascending). */\n        DATEASC: 'dateasc',\n        /** Sort by relevance. */\n        RELEVANCE: 'relevance'\n    };\n\n    /**\n     * Enumeration for record level\n     * @readonly\n     * @enum {string}\n     */\n    export var RECLEVEL = {\n        /**\n         * Get the full metadata (excluding all links, version level records,\n         *   tags and comments).\n         */\n        FULL: 'full',\n        /** Get the brief metadata. */\n        BRIEF: 'brief'\n    };\n\n    /**\n     * Enumeration for includes, can include multiple as a list.\n     * @readonly\n     * @enum {string}\n     */\n    export var INCLUDES = {\n        /**\n         * (Book, Picture, Article, Music, Map, Collection, NewspaperArticle,\n         *   List)\n         *   Include any public tags on this item.\n         */\n        TAGS: 'tags',\n        /**\n         * (Book, Picture, Article, Music, Map, Collection, NewspaperArticle,\n         *   List)\n         *   Include any public comments on this item.\n         */\n        COMMENTS: 'comments',\n        /**\n         * (Book, Picture, Article, Music, Map, Collection, NewspaperArticle)\n         *   Include the name and ID of any public lists this item belongs to.\n         */\n        LISTS: 'lists',\n        /** (Book, Picture, Article, Music, Map, Collection) Include information on which organisations have a copy of this item or version. */\n        HOLDINGS: 'holdings',\n        /** (Book, Picture, Article, Music, Map, Collection) Include the URLs for the item. */\n        LINKS: 'links',\n        /** (Book, Picture, Article, Music, Map, Collection) Include the subsribing organisation NUC ID and links. */\n        SUBSCRIBINGLIBS: 'subscribinglibs',\n        /** (Book, Picture, Article, Music, Map, Collection) Include all versions that make up this item. */\n        WORKVERSIONS: 'workversions',\n        /** (NewspaperArticle) Include the full text for this digitised newspaper article. */\n        ARTICLETEXT: 'articletext',\n        /** (Newspapers only) Include a list of years for which digitised articles from this newspaper title appear in Trove. */\n        YEARS: 'years',\n        /** (List only) Include the brief works, articles, people, external websites that belong to this list. */\n        LISTITEMS: 'listitems',\n        /**\n         * (All) Include all of the above.\n         */\n        ALL: 'all'\n    };\n\n    /**\n     * Enumeration for Australian states. Used to specify a state for which\n     *   to return {@link Newspaper} titles using the\n     *   {@link NewspaperList} class. To return all\n     *   [Newspapers]{@link Newspaper} for all states, do not specify\n     *   a state when making the query via {@link NewspaperList} or\n     *   use ALL.\n     * @readonly\n     * @enum {string}\n     */\n    export var STATES = {\n        /** New South Wales. */\n        NSW: 'nsw',\n        /** Australian Capital Territory. */\n        ACT: 'act',\n        /** Queensland. */\n        QLD: 'qld',\n        /** Tasmania. */\n        TAS: 'tas',\n        /** South Australia. */\n        SA: 'sa',\n        /** Northern Territory. */\n        NT: 'nt',\n        /** Western Australia. */\n        WA: 'wa',\n        /** Victoria. */\n        VIC: 'vic',\n        /** National newspapers (not the same as all states). */\n        NATIONAL: 'national',\n        /** All states. */\n        ALL: ''\n    };\n\n    export var SEARCH_RECORDS = {\n        people: 'people',\n        list: 'list',\n        newspaper: 'article',\n        article: 'work',\n        collection: 'work',\n        book: 'work',\n        picture: 'work',\n        map: 'work',\n        music: 'work'\n    };\n\n    // Base URL for Trove\n    var API_ADDRESS = 'http://api.trove.nla.gov.au/';\n\n    export var RECORD_TYPE = {\n        WORK: 'work/',\n        NEWS: 'newspaper/',\n        LIST: 'list/',\n        CONTRIBUTOR: 'contributor',\n        PEOPLE: 'people/'  // This is not supported by the Trove API.\n    };\n\n    export var API = {\n        WORK: API_ADDRESS + RECORD_TYPE.WORK,\n        LIST: API_ADDRESS + RECORD_TYPE.LIST,\n        NP_ARTICLE: API_ADDRESS + RECORD_TYPE.NEWS,\n        NP_TITLE: API_ADDRESS + RECORD_TYPE.NEWS + 'title/',\n        NP_TITLES: API_ADDRESS + RECORD_TYPE.NEWS + 'titles',\n        CONTRIBUTOR: API_ADDRESS + RECORD_TYPE.CONTRIBUTOR,\n        PEOPLE: API_ADDRESS + RECORD_TYPE.PEOPLE,\n        QUERY: API_ADDRESS + 'result'\n    };\n","/**\n * A class to hold a work. Work is the parent class for other classes\n *   (Article, Book, Collection, Map, Music, Picture).\n *\n * @class\n *\n * @param {Object} options The options object for the work.\n * @param {(number|string)} options.init The work identifier for which\n *   to retrieve data on construction.\n * @param {function} options.done The callback on receipt of data\n *   (optional).\n * @param {function} options.fail The callback on failure (optional).\n * @param {RECLEVEL} options.reclevel Whether to return the brief\n *   or full record.\n * @param {INCLUDES[]} options.includes\n *\n * @property {string} id\n * @property {string} url\n * @property {string} troveUrl\n * @property {string} title\n * @property {string[]} contributor\n * @property {(number|string)} issued When the work was issued\n * @property {string[]} type List of work types\n * @property {string} isPartOf ?\n * @property {string} subject ?\n * @property {string} abstract ?\n * @property {string} tableOfContents ?\n * @property {string[]} language List of languages\n * @property {string} wikipedia ?\n * @property {number} holdingsCount\n * @property {number} versionCount\n * @property {number} tagCount\n * @property {string} tagCount.level\n * @property {number} commentCount\n * @property {string} commentCount.level\n * @property {number} listCount\n * @property {string} tag\n * @property {string} tag.lastupdated\n * @property {string} comment\n * @property {string} comment.lastupdated\n * @property {string} comment.by\n * @property {string} comment.rating\n * @property {string} list\n * @property {string} list.url\n * @property {string} list.by\n * @property {string} list.lastupdated\n * @property {Object[]} identifier\n * @property {string} identifier.type\n * @property {string} identifier.linktype\n * @property {string} identifier.linktext\n * @property {string} identifier.value\n * @property {string} holding\n * @property {string} holding.nuc\n * @property {string} holding.name\n * @property {string} holding.library\n * @property {string} holding.url\n * @property {string} holding.callNumber\n * @property {string} version\n * @property {string} version.id\n * @property {string} version.record\n */\nexport class Work {\n\n    /**\n     * Create a Work object instance.\n     */\n    constructor (options) {\n        // console.log('Creating Work');\n\n        // Save and remove init from options.\n        var init;\n        if (options.init !== undefined) {\n            init = options.init;\n            delete options.init;\n        }\n\n        // Save all other options in this object.\n        $.extend(this, options);\n\n        // If we know the identifier, get the data\n        if (init !== undefined) {\n            this.get({id: init});\n        }\n\n    }\n\n    /**\n     * Internal\n     */\n    process_done (data) {\n        $.extend(this, data.work);\n        if (this.done !== undefined) {\n            this.done(this);\n        }\n    }\n\n    /**\n     * Internal\n     */\n    process_fail (jqXHR, textStatus, errorThrown) {\n        console.error(textStatus);\n\n        if (this.fail !== undefined) {\n            this.fail(this);\n        }\n    }\n\n    /**\n     * Get the Work metadata from the Trove server.\n     * @param {Object} options The options object for the query.\n     * @param {(number|string)} options.id The Work ID for which\n     *   to retrieve data.\n     * @param {function} options.done The callback on receipt of data\n     *   (optional).\n     * @param {function} options.fail The callback on failure (optional).\n     * @param {RECLEVEL} options.reclevel Whether to return the brief\n     *   or full record.\n     * @param {INCLUDES[]} options.includes\n     */\n    get (options) {\n        // console.log('Getting work');\n\n        // Override reclevel, includes, done and fail if specified\n        if (options) {\n            this.id = options.id || this.id;\n            this.reclevel = options.reclevel || this.reclevel;\n            this.includes = options.includes || this.includes;\n            this.done = options.done || this.done;\n            this.fail = options.fail || this.fail;\n        }\n\n        var query_data = {\n            key: Trove.trove_key,\n            encoding: 'json'\n        };\n\n        // Full or brief\n        if (this.reclevel !== undefined) {\n            query_data.reclevel = this.reclevel;\n        }\n\n        // What to include\n        if ((this.includes !== undefined) &&\n            (Array.isArray(this.includes)) &&\n            (this.includes.length > 0)) {\n            query_data.include = this.includes.join(',');\n        }\n\n        $.ajax({\n            dataType: \"jsonp\",\n            url: Trove.API.WORK + this.id,\n            data: query_data,\n            context: this\n        }).done(this.process_done).fail(this.process_fail);\n    }\n\n}\n"],"sourceRoot":""}